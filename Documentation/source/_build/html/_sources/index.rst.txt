.. figure:: _static/index/Cover.jpg
    :align: center


**********************
MeloDash Documentation
**********************

Running games and Music games have been two conventional categories on the market. They each possess unique attractive features based on the game mechanics reward model to win brand loyalty, but on the other hand, has their own limitations. By combining the positive features of these two categories and utilising the idea of ‘internet of things’ implemented by novel interactions, control and actuation of data acquired by phone sensors a new game category has been introduced via the project <MeloDash>

Melodash is a running game with a background story of a post-Ragnarök scene based on real-time music analysis. Player’s objective is to dodge obstacles that are automatically generated by the beat detection which has been implemented by analysing two elements of the music: frequency band and energy of the signal. Various categories of obstacles and extra features visualisations will be generated accordingly in the game immediately after a beat is detected. By utilising these features, obstacles are more diverse and the speed of the game can be automatically calibrated.

Game Features
-------------

.. _Sample Play: https://youtu.be/vJNqLWzHECI
.. _Unity Demo: https://youtu.be/WYGtsZllI_M

* Please see the `Sample Play`_ to see the basic game features.
* Please see the `Unity Demo`_ for development demo.

Interface
~~~~~~~~~

.. figure:: _static/index/layout.jpg
    :align: center

Basic control
~~~~~~~~~~~~~

.. _Phone Demo: https://www.youtube.com/watch?v=iwQSnrpky4A&feature=youtu.be

Please see the WIP `Phone Demo`_.

There basically two input control monitoring the current state of the character at a certain instance:

* A Touch on the screen to trigger the jump.
* When phone is inclined more than 30 degrees, the character enters gliding mode, otherwise it returns to the default running state.

.. note:: The phone demo version is behind the unity development and only core features have been implemented in the deployed deliverable. The number on the screen is the print of a ratio to determine from 0 to 1 the angle of the incline of the phone in order to determine whether the character enters gliding posture or not. It's just for the demo of the implementation of actuation of sensors and will not be shown in the real deployed game.

Shield
~~~~~~

The Shield feature was added along with the music bubbles. If the player sucessfully collect 5 bubbles, the girl will obtain a shield and become invincible for 5 seconds, which means hitting in any obstacles will not cause penalty. Bubbles collected during the Shield mode will not be counted untill the shield disappear.

A bubble is generated whenever a Snare is fired, that is when a beat is found in the medium frequency band.

.. figure:: _static/index/shield_feature.jpg
    :align: center

********
Contents
********

.. toctree::
   :maxdepth: 2
   :caption: Audio Analysis

   audio_analysis/max_msp.rst
   audio_analysis/audio_implementation.rst

.. toctree::
   :maxdepth: 2
   :caption: Graphic Design

   graphic_design.rst

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`